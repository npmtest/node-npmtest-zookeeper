{"/home/travis/build/npmtest/node-npmtest-zookeeper/test.js":"/* istanbul instrument in package npmtest_zookeeper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-zookeeper/lib.npmtest_zookeeper.js":"/* istanbul instrument in package npmtest_zookeeper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_zookeeper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_zookeeper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-zookeeper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-zookeeper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_zookeeper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_zookeeper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_zookeeper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_zookeeper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_zookeeper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_zookeeper.__dirname + '/lib.npmtest_zookeeper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-zookeeper/node_modules/zookeeper/lib/index.js":"module.exports = require('./zookeeper');\nmodule.exports.ZooKeeper = module.exports;  // for backwards compatibility\nmodule.exports.Promise = require('./zk_promise');\n","/home/travis/build/npmtest/node-npmtest-zookeeper/node_modules/zookeeper/lib/zookeeper.js":"var EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar _ = require('lodash');\nvar path = require('path');\nvar NativeZk = require(__dirname + '/../build/zookeeper.node').ZooKeeper;\n\nvar async = {};\nasync.apply = require('async/apply');\nasync.waterfall = require('async/waterfall');\n\n// with Node 0.5.x and greater, EventEmitter is pure-js, so we make a simple wrapper...\n// Partly inspired by https://github.com/bnoordhuis/node-event-emitter\n\n////////////////////////////////////////////////////////////////////////////////\n// Constructor\n////////////////////////////////////////////////////////////////////////////////\n\nexports = module.exports = ZooKeeper;\nfunction ZooKeeper(config) {\n  var self = this;\n  if(_.isString(config)) {\n    config = { connect: config };\n  }\n  self.config = config;\n  self._native = new NativeZk();\n  self._native.emit = function(ev, a1, a2, a3) {\n    if(self.logger)\n      self.logger(\"Emitting '\" + ev + \"' with args: \" + a1 + \", \" + a2 + \", \" + a3);\n    if(ev === 'connect' || ev === 'close') {\n      // the event is passing the native object.  need to mangle to return the wrapper\n      a1 = self;\n    }\n    self.emit(ev, a1, a2, a3);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Public Properties\n  ////////////////////////////////////////////////////////////////////////////////\n\n  function proxyProperty(name) {\n    self.__defineGetter__(name, function(){\n      return self._native[name];\n    });\n    self.__defineSetter__(name, function(val){\n      self._native[name] = val;\n    });\n  }\n\n  proxyProperty('state');\n  proxyProperty('timeout');\n  proxyProperty('client_id');\n  proxyProperty('client_password');\n  proxyProperty('is_unrecoverable');\n\n  self.encoding = null;  // Return 'Buffer' objects by default\n\n  self.setEncoding = function setEncoding(val) {\n    self.encoding = val;\n  };\n\n  // Backwards Compat for 'data_as_buffer' property.  deprecated.  just use setEncoding()\n  self.__defineGetter__('data_as_buffer', function(){\n    // if there's an encoding, then data isn't a buffer.  If there's no encoding,\n    // then data will be a buffer\n    return self.encoding ? false : true;\n  });\n  self.__defineSetter__('data_as_buffer', function(data_as_buffer){\n    // if the data is a buffer, then there's no encoding. If the data is NOT a buffer, then the default encoding is 'utf8'\n    self.encoding = ((data_as_buffer == true) ? null : 'utf8');\n  });\n\n}\n\nutil.inherits(ZooKeeper, EventEmitter);\n\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Constants\n////////////////////////////////////////////////////////////////////////////////\n\n// Events (for backwards compatibility.  deprecated.  use the strings directly)\nexports.on_closed             = 'close';\nexports.on_connected          = 'connect';\nexports.on_connecting         = 'connecting';\nexports.on_event_created      = 'created';\nexports.on_event_deleted      = 'deleted';\nexports.on_event_changed      = 'changed';\nexports.on_event_child        = 'child';\nexports.on_event_notwatching  = 'notwatching';\n\n// Other Constants\nfor(var key in NativeZk) {\n  exports[key] = NativeZk[key];\n  // console.log(key + \" = \" + exports[key]);\n}\n\n/* Notable Constants:\nPermissions:\n * ZOO_PERM_READ              =  1\n * ZOO_PERM_WRITE             =  2\n * ZOO_PERM_CREATE            =  4\n * ZOO_PERM_DELETE            =  8\n * ZOO_PERM_ADMIN             =  16\n * ZOO_PERM_ALL               =  31\n\nStates:\n * ZOO_EXPIRED_SESSION_STATE  =  -112\n * ZOO_AUTH_FAILED_STATE      =  -113\n * ZOO_CONNECTING_STATE       =  1\n * ZOO_ASSOCIATING_STATE      =  2\n * ZOO_CONNECTED_STATE        =  3\n\nLog Levels:\n * ZOO_LOG_LEVEL_ERROR        =  1\n * ZOO_LOG_LEVEL_WARN         =  2\n * ZOO_LOG_LEVEL_INFO         =  3\n * ZOO_LOG_LEVEL_DEBUG        =  4\n\nAPI Responses:\n * ZOK                        =  0\n * ZSYSTEMERROR               =  -1\n * ZRUNTIMEINCONSISTENCY      =  -2\n * ZDATAINCONSISTENCY         =  -3\n * ZCONNECTIONLOSS            =  -4\n * ZMARSHALLINGERROR          =  -5\n * ZUNIMPLEMENTED             =  -6\n * ZOPERATIONTIMEOUT          =  -7\n * ZBADARGUMENTS              =  -8\n * ZINVALIDSTATE              =  -9\n * ZAPIERROR                  =  -100\n * ZNONODE                    =  -101\n * ZNOAUTH                    =  -102\n * ZBADVERSION                =  -103\n * ZNOCHILDRENFOREPHEMERALS   =  -108\n * ZNODEEXISTS                =  -110\n * ZNOTEMPTY                  =  -111\n * ZSESSIONEXPIRED            =  -112\n * ZINVALIDCALLBACK           =  -113\n * ZINVALIDACL                =  -114\n * ZAUTHFAILED                =  -115\n * ZCLOSING                   =  -116\n * ZNOTHING                   =  -117\n * ZSESSIONMOVED              =  -118\n\nDunno:\n * ZOO_EPHEMERAL              =  1\n * ZOO_SEQUENCE               =  2\n\n*/\n\n////////////////////////////////////////////////////////////////////////////////\n// Methods\n////////////////////////////////////////////////////////////////////////////////\n\nZooKeeper.prototype.setLogger = function(logger) {\n  if(logger === true) {\n    this.logger = function logger(str) {\n      console.log(\"ZOOKEEPER_LOG: \" + str);\n    }\n  } else if(logger === false) {\n    this.logger = undefined;\n  } else if(_.isFunction(logger)) {\n    this.logger = logger;\n  } else {\n    throw new Error(\"InvalidArgument: logger must be a function or true/false to utilize default logger\");\n  }\n}\n\nZooKeeper.prototype.init = function init(config) {\n  var self = this;\n  if(_.isString(config)) {\n    config = { connect: config };\n  }\n  if(self.config) {\n    config = config ? _.defaults(config, self.config) : self.config;\n  }\n  if(this.logger) this.logger(\"Calling init with \" + util.inspect(arguments));\n  if(! _.isUndefined(config.data_as_buffer)) {\n    self.data_as_buffer = config.data_as_buffer;\n    if(this.logger) this.logger(\"Encoding for data output: %s\", self.encoding);\n  }\n  this._native.init.call(this._native, config);\n\n  // The native code returns a ref to itself.\n  // So we should return a ref to the wrapper object\n  return self;\n}\n\nZooKeeper.prototype.connect = function connect(options, cb) {\n  var self = this;\n  if(_.isFunction(options)) {\n    cb = options;\n    options = null;\n  }\n  self.init(options);\n\n  function errorHandler(err) {\n    self.removeListener('error', errorHandler);\n    self.removeListener('connect', connectHandler);\n    cb(err);\n  }\n\n  function connectHandler() {\n    self.removeListener('error', errorHandler);\n    self.removeListener('connect', connectHandler);\n    cb(null, self);\n  }\n\n  self.on('error', errorHandler);\n  self.on('connect', connectHandler);\n\n/** commenting out change initially made by  vincent-zhao\n  self.a_get('/',false,function(rc,error,stat,data){\n    if(rc != 0){\n      cb(error);\n    }\n  });\n*/  \n}\n\nZooKeeper.prototype.close = function close() {\n  if(this.logger) this.logger(\"Calling close with \" + util.inspect(arguments));\n  return this._native.close.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.a_create = function a_create() {\n  if(this.logger) this.logger(\"Calling a_create with \" + util.inspect(arguments));\n  return this._native.a_create.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.a_exists = function a_exists() {\n  if(this.logger) this.logger(\"Calling a_exists with \" + util.inspect(arguments));\n  return this._native.a_exists.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.aw_exists = function aw_exists() {\n  if(this.logger) this.logger(\"Calling aw_exists with \" + util.inspect(arguments));\n  return this._native.aw_exists.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.a_get = function a_get(path, watch, data_cb) {\n  var self = this;\n  if(this.logger) this.logger(\"Calling a_get with \" + util.inspect(arguments));\n  return this._native.a_get.call(this._native, path, watch, function(rc, error, stat, data) {\n    if(data && self.encoding) {\n      data = data.toString(self.encoding);\n    }\n    data_cb(rc, error, stat, data);\n  });\n}\n\nZooKeeper.prototype.aw_get = function aw_get(path, watch_cb, data_cb) {\n  var self = this;\n  if(this.logger) this.logger(\"Calling aw_get with \" + util.inspect(arguments));\n  return this._native.aw_get.call(this._native, path, watch_cb, function(rc, error, stat, data) {\n    if(data && self.encoding) {\n      data = data.toString(self.encoding);\n    }\n    data_cb(rc, error, stat, data);\n  });\n}\n\nZooKeeper.prototype.a_get_children = function a_get_children() {\n  if(this.logger) this.logger(\"Calling a_get_children with \" + util.inspect(arguments));\n  return this._native.a_get_children.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.aw_get_children = function aw_get_children() {\n  if(this.logger) this.logger(\"Calling aw_get_children with \" + util.inspect(arguments));\n  return this._native.aw_get_children.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.a_get_children2 = function a_get_children2() {\n  if(this.logger) this.logger(\"Calling a_get_children with \" + util.inspect(arguments));\n  return this._native.a_get_children2.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.aw_get_children2 = function aw_get_children2() {\n  if(this.logger) this.logger(\"Calling aw_get_children with \" + util.inspect(arguments));\n  return this._native.aw_get_children2.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.a_set = function a_set() {\n  if(this.logger) this.logger(\"Calling a_set with \" + util.inspect(arguments));\n  return this._native.a_set.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.a_delete_ = function a_delete_() {\n  if(this.logger) this.logger(\"Calling a_delete_ with \" + util.inspect(arguments));\n  return this._native.a_delete_.apply(this._native, arguments);\n}\n\nZooKeeper.prototype.a_get_acl = function a_get_acl () {\n  if(this.logger) this.logger(\"Calling a_get_acl with \" + util.inspect(arguments));\n  return this._native.a_get_acl.apply(this._native, arguments);\n};\n\nZooKeeper.prototype.a_set_acl = function a_get_acl () {\n  if(this.logger) this.logger(\"Calling a_set_acl with \" + util.inspect(arguments));\n  return this._native.a_set_acl.apply(this._native, arguments);\n};\n\nZooKeeper.prototype.add_auth = function a_get_acl () {\n  if(this.logger) this.logger(\"Calling add_auth with \" + util.inspect(arguments));\n  return this._native.add_auth.apply(this._native, arguments);\n};\n\nZooKeeper.prototype.mkdirp = function (p, cb) {\n  if(this.logger) this.logger(\"Calling mkdirp with \" + util.inspect(arguments));\n  return mkdirp(this, p, cb);\n}\n\nZooKeeper.prototype.a_sync = function a_sync() {\n  if(this.logger) this.logger(\"Calling a_sync \" + util.inspect(arguments));\n  return this._native.a_sync.apply(this._native, arguments);\n}\n\n//\n// ZK does not support ./file or /dir/../file\n// mkdirp(zookeeperConnection, '/a/deep/path/to/a/file', cb)\n//\nfunction mkdirp(con, p, callback) {\n  p = path.normalize(p);\n  var dirs = p.split('/').slice(1); // remove empty string at the start.\n\n  // console.log('dirs', dirs);\n\n  var tasks = [];\n  dirs.forEach(function(dir, i) {\n    var subpath = '/' + dirs.slice(0, i).join('/') + '/' + dir;\n    subpath = path.normalize(subpath); // remove extra `/` in first iteration\n    tasks.push(async.apply(create, con, subpath));\n  });\n  async.waterfall(tasks, function(err, results) {\n    if(err) return callback(err);\n    // succeeded!\n    return callback(null, true);\n  });\n}\n\n//\n// create(zookeeperConnection, '/some-path', cb)\n// if there is a problem:\n//    cb(error)\n// if the dir was created, or already exists:\n//    cb()\n//\nfunction create(con, p, cb) {\n  var data = 'created by zk-mkdir-p'; // just want a dir, so store something\n  var flags = 0; // none\n  con.a_create(p, data, flags, function(rc, error, zkPath) {\n    // already exists, cool.\n    if(rc == ZooKeeper.ZNODEEXISTS) {\n      return cb();\n    }\n    if(rc != 0) {\n      return cb(new Error('Zookeeper Error: code='+rc+'   '+error));\n    }\n    // sucessfully created!\n    return cb();\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-zookeeper/node_modules/zookeeper/lib/zk_promise.js":"var assert = require ('assert');\nvar promise = require(\"./promise\");\nvar ZooKeeper = require (\"./zookeeper\");\nvar util = require('util');\n\nexports = module.exports = ZooKeeperPromise;\nexports.ZK = ZooKeeperPromise; // backwards compatibility\n\nfunction ZooKeeperPromise() {\n  var self = this;\n\n  ZooKeeper.apply(this, arguments);\n\n  return self;\n}\nutil.inherits(ZooKeeperPromise, ZooKeeper);\n\nZooKeeperPromise.prototype.on_connected = function on_connected() {\n  var self = this;\n  var deferred = promise.defer();\n  self.once ('connect', function () {\n    deferred.resolve (self);\n  });\n  return deferred.promise;\n};\n\n\n\nfunction convertAsync(fn){\n  return function() {\n    var self = this;\n    var deferred = promise.defer();\n    arguments.length ++;\n    arguments[arguments.length-1] = function(rc, error, result){\n      if(rc) {\n        deferred.emitError(rc);\n      } else {\n        if(arguments.length > 3){\n          // if there are multiple success values, we return an array\n          Array.prototype.shift.call(arguments, 1);\n          Array.prototype.shift.call(arguments, 1);\n          deferred.emitSuccess(arguments);\n        } else {\n          deferred.emitSuccess(result);\n        }\n      }\n    };\n    fn.apply (self, arguments);\n    return deferred.promise;\n  };\n};\n\nfor (var f in ZooKeeperPromise.prototype) {\n    var m = f.match(/^a(w?)_(.*)$/);\n    if (m) {\n        var new_func = m[1]? m[1] + \"_\" + m[2] : m[2];\n        ZooKeeperPromise.prototype[new_func] = convertAsync (ZooKeeperPromise.prototype[f]);\n        //console.log (\"function %s is %j\", f, util.inspect(ZK.prototype[new_func],true,3));\n    }\n}\n\n","/home/travis/build/npmtest/node-npmtest-zookeeper/node_modules/zookeeper/lib/promise.js":"\n// Kris Zyp\n\n// this is based on the CommonJS spec for promises: \n// http://wiki.commonjs.org/wiki/Promises\n// Includes convenience functions for promises, much of this is taken from Tyler Close's ref_send \n// and Kris Kowal's work on promises.\n// // MIT License\n\n// A typical usage:\n// A default Promise constructor can be used to create a self-resolving deferred/promise:\n// var Promise = require(\"promise\").Promise;\n//  var promise = new Promise();\n// asyncOperation(function(){\n//  Promise.resolve(\"succesful result\");\n// });\n//  promise -> given to the consumer\n//  \n//  A consumer can use the promise\n//  promise.then(function(result){\n//    ... when the action is complete this is executed ...\n//   },\n//   function(error){\n//    ... executed when the promise fails\n//  });\n//\n// Alternately, a provider can create a deferred and resolve it when it completes an action. \n// The deferred object a promise object that provides a separation of consumer and producer to protect\n// promises from being fulfilled by untrusted code.\n// var defer = require(\"promise\").defer;\n//  var deferred = defer();\n// asyncOperation(function(){\n//  deferred.resolve(\"succesful result\");\n// });\n//  deferred.promise -> given to the consumer\n//  \n//  Another way that a consumer can use the promise (using promise.then is also allowed)\n// var when = require(\"promise\").when;\n// when(promise,function(result){\n//    ... when the action is complete this is executed ...\n//   },\n//   function(error){\n//    ... executed when the promise fails\n//  });\ntry{\n  var enqueue = require(\"event-queue\").enqueue;\n}\ncatch(e){\n  // squelch the error, and only complain if the queue is needed\n}\nif(!enqueue){\n  enqueue = (typeof process !== \"undefined\" && process.nextTick) || function(func){\n    func();\n  }\n}  \nvar freeze = Object.freeze || function(){};\n\n/**\n * Default constructor that creates a self-resolving Promise. Not all promise implementations\n * need to use this constructor.\n */\nvar Promise = function(canceller){\n};\n\n/**\n * Promise implementations must provide a \"then\" function.\n */\nPromise.prototype.then = function(resolvedCallback, errorCallback, progressCallback){\n  throw new TypeError(\"The Promise base class is abstract, this function must be implemented by the Promise implementation\");\n};\n\n/**\n * If an implementation of a promise supports a concurrency model that allows\n * execution to block until the promise is resolved, the wait function may be \n * added. \n */\n/**\n * If an implementation of a promise can be cancelled, it may add this function\n */\n // Promise.prototype.cancel = function(){\n // };\n\nPromise.prototype.get = function(propertyName){\n  return this.then(function(value){\n    return value[propertyName];\n  });\n};\n\nPromise.prototype.put = function(propertyName, value){\n  return this.then(function(object){\n    return object[propertyName] = value;\n  });\n};\n\nPromise.prototype.call = function(functionName /*, args */){\n  return this.then(function(value){\n    return value[propertyName].apply(value, Array.prototype.slice.call(arguments, 1));\n  });\n};\n\n/** Dojo/NodeJS methods*/\nPromise.prototype.addCallback = function(callback){\n  return this.then(callback);\n};\n\nPromise.prototype.addErrback = function(errback){\n  return this.then(function(){}, errback);\n};\n\n/*Dojo methods*/\nPromise.prototype.addBoth = function(callback){\n  return this.then(callback, callback);\n};\n\nPromise.prototype.addCallbacks = function(callback, errback){\n  return this.then(callback, errback);\n};\n\n/*NodeJS method*/\nPromise.prototype.wait = function(){\n  return exports.wait(this);\n};\n\nDeferred.prototype = Promise.prototype;\n// A deferred provides an API for creating and resolving a promise.\nexports.Promise = exports.Deferred = exports.defer = defer;\nfunction defer(){\n  return new Deferred();\n} \n\nvar contextHandler = exports.contextHandler = {};\n\nfunction Deferred(canceller){\n  var result, finished, isError, waiting = [], handled;\n  var promise = this.promise = new Promise();\n  var currentContextHandler = contextHandler.getHandler && contextHandler.getHandler();\n  \n  function notifyAll(value){\n    if(finished){\n      throw new Error(\"This deferred has already been resolved\");        \n    }\n    result = value;\n    finished = true;\n    for(var i = 0; i < waiting.length; i++){\n      notify(waiting[i]);  \n    }\n  }\n  function notify(listener){\n    var func = (isError ? listener.error : listener.resolved);\n    if(func){\n      handled = true;\n      enqueue(function(){\n        if(currentContextHandler){\n          currentContextHandler.resume();\n        }\n        try{\n          var newResult = func(result);\n          if(newResult && typeof newResult.then === \"function\"){\n            newResult.then(listener.deferred.resolve, listener.deferred.reject);\n            return;\n          }\n          listener.deferred.resolve(newResult);\n        }\n        catch(e){\n          listener.deferred.reject(e);\n        }\n        finally{\n          if(currentContextHandler){\n            currentContextHandler.suspend();\n          }\n        }\n      });\n    }\n    else{\n      if(isError){\n        if (listener.deferred.reject(result, true)) {\n          handled = true;\n          }\n      }\n      else{\n        listener.deferred.resolve.apply(listener.deferred, result);\n      }\n    }\n  }\n  // calling resolve will resolve the promise\n  this.resolve = this.callback = this.emitSuccess = function(value){\n    notifyAll(value);\n  };\n  \n  // calling error will indicate that the promise failed\n  var reject = this.reject = this.errback = this.emitError = function(error, dontThrow){\n    isError = true;\n    notifyAll(error);\n    if (!dontThrow) {\n      enqueue(function () {\n        if (!handled) {\n          throw error;\n        }\n      });\n    }\n    return handled;\n  };\n  \n  // call progress to provide updates on the progress on the completion of the promise\n  this.progress = function(update){\n    for(var i = 0; i < waiting.length; i++){\n      var progress = waiting[i].progress;\n      progress && progress(update);  \n    }\n  }\n  // provide the implementation of the promise\n  this.then = promise.then = function(resolvedCallback, errorCallback, progressCallback){\n    var returnDeferred = new Deferred(promise.cancel);\n    var listener = {resolved: resolvedCallback, error: errorCallback, progress: progressCallback, deferred: returnDeferred}; \n    if(finished){\n      notify(listener);\n    }\n    else{\n      waiting.push(listener);\n    }\n    return returnDeferred.promise;\n  };\n  var timeout;\n  if(typeof setTimeout !== \"undefined\") {\n    this.timeout = function (ms) {\n      if (ms === undefined) {\n        return timeout;\n      }\n      timeout = ms;\n      setTimeout(function () {\n        if (!finished) {\n          if (promise.cancel) {\n            promise.cancel(new Error(\"timeout\"));\n          }\n          else {\n            reject(new Error(\"timeout\"));\n          }\n        }\n      }, ms);\n      return promise;\n    };\n  }\n  \n  if(canceller){\n    this.cancel = promise.cancel = function(){\n      var error = canceller();\n      if(!(error instanceof Error)){\n        error = new Error(error);\n      }\n      reject(error);\n    }\n  }\n  freeze(promise);\n};\n\nfunction perform(value, async, sync){\n  try{\n    if(value && typeof value.then === \"function\"){\n      value = async(value);\n    }\n    else{\n      value = sync(value);\n    }\n    if(value && typeof value.then === \"function\"){\n      return value;\n    }\n    var deferred = new Deferred();\n    deferred.resolve(value);\n    return deferred.promise;\n  }catch(e){\n    var deferred = new Deferred();\n    deferred.reject(e);\n    return deferred.promise;\n  }\n  \n}\n/**\n * Promise manager to make it easier to consume promises\n */\n \n/**\n * Registers an observer on a promise.\n * @param value   promise or value to observe\n * @param resolvedCallback function to be called with the resolved value\n * @param rejectCallback  function to be called with the rejection reason\n * @param progressCallback  function to be called when progress is made\n * @return promise for the return value from the invoked callback\n */\nexports.whenPromise = function(value, resolvedCallback, rejectCallback, progressCallback){\n  return perform(value, function(value){\n    return value.then(resolvedCallback, rejectCallback, progressCallback);\n  },\n  function(value){\n    return resolvedCallback(value);\n  });\n};\n/**\n * Registers an observer on a promise.\n * @param value   promise or value to observe\n * @param resolvedCallback function to be called with the resolved value\n * @param rejectCallback  function to be called with the rejection reason\n * @param progressCallback  function to be called when progress is made\n * @return promise for the return value from the invoked callback or the value if it\n * is a non-promise value\n */\nexports.when = function(value, resolvedCallback, rejectCallback, progressCallback){\n  if(value && typeof value.then === \"function\"){\n    return exports.whenPromise(value, resolvedCallback, rejectCallback, progressCallback);\n  }\n  return resolvedCallback(value);\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param target  promise or value for target object\n * @param property    name of property to get\n * @return promise for the property value\n */\nexports.get = function(target, property){\n  return perform(target, function(target){\n    return target.get(property);\n  },\n  function(target){\n    return target[property]\n  });\n};\n\n/**\n * Invokes a method in a future turn.\n * @param target  promise or value for target object\n * @param methodName    name of method to invoke\n * @param args    array of invocation arguments\n * @return promise for the return value\n */\nexports.post = function(target, methodName, args){\n  return perform(target, function(target){\n    return target.call(property, args);\n  },\n  function(target){\n    return target[methodName].apply(target, args);\n  });\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param target  promise or value for target object\n * @param property    name of property to set\n * @param value   new value of property\n * @return promise for the return value\n */\nexports.put = function(target, property, value){\n  return perform(target, function(target){\n    return target.put(property, value);\n  },\n  function(target){\n    return target[property] = value;\n  });\n};\n\n\n/**\n * Waits for the given promise to finish, blocking (and executing other events)\n * if necessary to wait for the promise to finish. If target is not a promise\n * it will return the target immediately. If the promise results in an reject,\n * that reject will be thrown.\n * @param target   promise or value to wait for.\n * @return the value of the promise;\n */\nexports.wait = function(target){\n  if(!queue){\n    throw new Error(\"Can not wait, the event-queue module is not available\");\n  }\n  if(target && typeof target.then === \"function\"){\n    var isFinished, isError, result;    \n    target.then(function(value){\n      isFinished = true;\n      result = value;\n    },\n    function(error){\n      isFinished = true;\n      isError = true;\n      result = error;\n    });\n    while(!isFinished){\n      queue.processNextEvent(true);\n    }\n    if(isError){\n      throw result;\n    }\n    return result;\n  }\n  else{\n    return target;\n  }\n};\n\n\n\n/**\n * Takes an array of promises and returns a promise that is fulfilled once all\n * the promises in the array are fulfilled\n * @param array  The array of promises\n * @return the promise that is fulfilled when all the array is fulfilled, resolved to the array of results\n */\nexports.all = function(array){\n  var deferred = new Deferred();\n  if(!(array instanceof Array)){\n    array = Array.prototype.slice.call(arguments);\n  }\n  var fulfilled = 0, length = array.length;\n  var results = [];\n  if (length === 0) deferred.resolve(results);\n  else {\n    array.forEach(function(promise, index){\n      exports.when(promise, each, each);\n      function each(value){\n        results[index] = value;\n        fulfilled++;\n        if(fulfilled === length){\n          deferred.resolve(results);\n        }\n      }\n    });\n  }\n  return deferred.promise;\n};\n\n/**\n * Takes an array of promises and returns a promise that is fulfilled when the first \n * promise in the array of promises is fulfilled\n * @param array  The array of promises\n * @return a promise that is fulfilled with the value of the value of first promise to be fulfilled\n */\nexports.first = function(array){\n  var deferred = new Deferred();\n  if(!(array instanceof Array)){\n    array = Array.prototype.slice.call(arguments);\n  }\n  var fulfilled;\n  array.forEach(function(promise, index){\n    exports.when(promise, function(value){\n      if (!fulfilled) {\n        fulfilled = true;\n        deferred.resolve(value);\n      }  \n    },\n    function(error){\n      if (!fulfilled) {\n        fulfilled = true;\n        deferred.resolve(error);\n      }  \n    });\n  });\n  return deferred.promise;\n};\n\n/**\n * Takes an array of asynchronous functions (that return promises) and \n * executes them sequentially. Each funtion is called with the return value of the last function\n * @param array  The array of function\n * @param startingValue The value to pass to the first function\n * @return the value returned from the last function\n */\nexports.seq = function(array, startingValue){\n  array = array.concat(); // make a copy\n  var deferred = new Deferred();\n  function next(value){\n    var nextAction = array.shift();\n    if(nextAction){\n      exports.when(nextAction(value), next, deferred.reject);\n    }\n    else {\n      deferred.resolve(value);\n    }  \n  }\n  next(startingValue);\n  return deferred.promise;\n};\n\n\n/**\n * Delays for a given amount of time and then fulfills the returned promise.\n * @param milliseconds The number of milliseconds to delay\n * @return A promise that will be fulfilled after the delay\n */\nif(typeof setTimeout !== \"undefined\") {\n  exports.delay = function(milliseconds) {\n    var deferred = new Deferred();\n    setTimeout(function(){\n      deferred.resolve();\n    }, milliseconds);\n    return deferred.promise;\n  };\n}\n\n\n\n/**\n * Runs a function that takes a callback, but returns a Promise instead.\n * @param func   node compatible async function which takes a callback as its last argument\n * @return promise for the return value from the callback from the function\n */\nexports.execute = function(asyncFunction){\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  var deferred = new Deferred();\n  args.push(function(error, result){\n    if(error) {\n      deferred.emitError(error);\n    }\n    else {\n      if(arguments.length > 2){\n        // if there are multiple success values, we return an array\n        Array.prototype.shift.call(arguments, 1);\n        deferred.emitSuccess(arguments);\n      }\n      else{\n        deferred.emitSuccess(result);\n      }\n    }\n  });\n  asyncFunction.apply(this, args);\n  return deferred.promise;\n};\n\n/**\n * Converts a Node async function to a promise returning function\n * @param func   node compatible async function which takes a callback as its last argument\n * @return A function that returns a promise\n */\nexports.convertNodeAsyncFunction = function(asyncFunction, callbackNotDeclared){\n  var arity = asyncFunction.length;\n  if(callbackNotDeclared){\n    arity++;\n  }\n  return function(){\n    var deferred = new Deferred();\n    arguments.length = arity;\n    arguments[arity - 1] = function(error, result){\n      if(error) {\n        deferred.emitError(error);\n      }\n      else {\n        if(arguments.length > 2){\n          // if there are multiple success values, we return an array\n          Array.prototype.shift.call(arguments, 1);\n          deferred.emitSuccess(arguments);\n        }\n        else{\n          deferred.emitSuccess(result);\n        }\n      }\n    };\n    asyncFunction.apply(this, arguments);\n    return deferred.promise;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-zookeeper/node_modules/zookeeper/lib/fs-promise.js":"/**\n* Node fs module that returns promises\n*/\n\nvar fs = require(\"fs\"),\n  convertNodeAsyncFunction = require(\"./promise\").convertNodeAsyncFunction;\n\n// convert all the non-sync functions\nfor (var i in fs) {\n  if (!(i.match(/Sync$/))) {\n    exports[i] = convertNodeAsyncFunction(fs[i]);\n  }\n}\n\n// convert the functions that don't have a declared callback\nexports.writeFile = convertNodeAsyncFunction(fs.writeFile, true);\nexports.readFile = convertNodeAsyncFunction(fs.readFile, true);"}